{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","maze","gridNum","roadList","gapWidth","gridWidth","directionList","preior","roadRun","backPointList","createMaze","str","_this2","rowIndex","colIndex","tempMaze","checkAround","Y","X","Number","around","_loop","index_D","YVector","XVector","checkPosition","times","String","handleNextDirection","indexOf","arrInclude12","forEach","el","index","push","value","randomIndex","Math","floor","random","length","index_direction","colChangeTo","status","backIndex_direction","key","_handleNextDirection","YV","XV","slice","stepNum","sort","a","b","createEnd","setState","toConsumableArray","makeRoad","tempMazeRow","tempMazeOuterFrameRow","tempMazeGapRow","concat","initEmptyMaze","_this3","react_default","createElement","map","row","style","height","col","display","width","backgroundColor","createStyle","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e9a022f7.chunk.js","sourcesContent":["\nimport React, { Component } from 'react'\n\nexport default class App extends Component {\n  /*\n    0:外框\n    1:間隔\n    2:未造訪\n    3:已造訪\n    4:已回朔\n    5:不合法\n    6:起點\n    7:終點\n  */\n  /*\n    0:上\n    1:右\n    2:下\n    3:左\n  */\n  constructor(props) {\n    super(props)\n    this.state = {\n      maze: [],\n      gridNum: 20,\n      roadList: []\n    }\n    this.gapWidth = 2\n    this.gridWidth = 20\n    this.directionList = [[-1, 0], [0, 1], [1, 0], [0, -1]]\n    this.preior = ['12', '13', '14', '34', '33', '44']\n    this.roadRun = ''\n    this.backPointList = []\n  }\n  componentDidMount() {\n    this.createMaze()\n\n  }\n  createStyle(str) {\n    switch (str) {\n      case '0':\n        return 'green'\n      case '1':\n        return 'brown'\n      case '2':\n        return 'yellow'\n      case '3':\n        return 'blue'\n      case '4':\n        return 'white'\n      case '6':\n        return 'blue'\n      case '7':\n        return 'red'\n      default:\n        break;\n    }\n  }\n  createMaze() {\n    const initEmptyMaze = () => {\n      let tempMaze = []\n      let tempMazeRow = ['0']\n      let tempMazeOuterFrameRow = ['0']\n      let tempMazeGapRow = ['0']\n      for (let index = 0; index < this.state.gridNum * 2 - 1; index++) {\n        tempMazeOuterFrameRow.push('0')\n        tempMazeGapRow.push('1')\n      }\n      tempMazeOuterFrameRow.push('0')\n      tempMazeGapRow.push('0')\n      for (let index = 0; index < this.state.gridNum - 1; index++) {\n        tempMazeRow.push('2')\n        tempMazeRow.push('1')\n      }\n      tempMazeRow.push('2')\n      tempMazeRow.push('0')\n      tempMaze.push([...tempMazeOuterFrameRow])\n      for (let index = 0; index < this.state.gridNum - 1; index++) {\n        tempMaze.push([...tempMazeRow])\n        tempMaze.push([...tempMazeGapRow])\n      }\n      tempMaze.push([...tempMazeRow])\n      tempMaze.push([...tempMazeOuterFrameRow])\n      tempMaze[1][1] = '6'\n      return tempMaze\n    }\n    const makeRoad = (rowIndex, colIndex, tempMaze) => {\n      const checkAround = (Y, X, tempMaze) => {\n        Y = Number(Y)\n        X = Number(X)\n        let around = ['', '', '', '']\n        for (const index_D in this.directionList) {\n          const YVector = this.directionList[index_D][0]\n          const XVector = this.directionList[index_D][1]\n          const checkPosition = (times) => {\n            if (tempMaze[Y + YVector * times]) {\n              if (tempMaze[Y + YVector * times][X + XVector * times]) {\n                return String(tempMaze[Y + YVector * times][X + XVector * times])\n              } else {\n                return '5'\n              }\n            } else {\n              return '5'\n            }\n          }\n          around[index_D] = checkPosition(1) + checkPosition(2)\n        }\n        return around\n      }\n      const handleNextDirection = (around) => {\n        /*\n        有12最優先\n        有36則表示回到起點了\n        若沒有12、36，只有13 33 則往33走 把本身加路徑變為已回朔，注意 終點不改變\n        */\n        if (around.indexOf('12') !== -1) {\n          let arrInclude12 = []\n          around.forEach((el, index) => {\n            if (el === '12') {\n              arrInclude12.push({ value: el, index: index })\n            }\n          });\n          let randomIndex = Math.floor(Math.random() * (arrInclude12.length))\n          while (randomIndex === arrInclude12.length) {\n            randomIndex = Math.floor(Math.random() * (arrInclude12.length))\n          }\n          return { index_direction: arrInclude12[randomIndex]['index'], colChangeTo: '3', status: 'roading' }\n        } else {\n          let backIndex_direction\n          if (around.indexOf('36') !== -1) {//回到起點\n            for (const key in around) {\n              if (around[key] === '36') {\n                backIndex_direction = key\n              }\n            }\n            //console.log('渲染結束')\n            return { index_direction: backIndex_direction, colChangeTo: '4', status: 'backToStart' }\n          }\n          else if (around.indexOf('44') === -1 && around.indexOf('33') !== -1) {//折返起點\n            for (const key in around) {\n              if (around[key] === '33') {\n                backIndex_direction = key\n              }\n            }\n            //console.log('折返起點')\n            return { index_direction: backIndex_direction, colChangeTo: '4', status: 'backPoint' }\n          }\n          else if (around.indexOf('33') !== -1) {\n            for (const key in around) {\n              if (around[key] === '33') {\n                backIndex_direction = key\n              }\n            }\n            //console.log('需折返')\n            return { index_direction: backIndex_direction, colChangeTo: '4', status: 'backing' }\n          }\n        }\n      }\n      const createEnd = (tempMaze) => {\n        this.backPointList.sort(function (a, b) {\n          return b.stepNum - a.stepNum;\n        });\n        tempMaze[this.backPointList[0].rowIndex][this.backPointList[0].colIndex] = '7'\n      }\n      while (true) {\n        const { index_direction, colChangeTo, status } = handleNextDirection(checkAround(rowIndex, colIndex, tempMaze))\n        const YV = this.directionList[index_direction][0]\n        const XV = this.directionList[index_direction][1]\n        if (tempMaze[rowIndex][colIndex] !== '6') {\n          tempMaze[rowIndex][colIndex] = colChangeTo\n        }\n        tempMaze[rowIndex + YV][colIndex + XV] = colChangeTo\n        if (status === 'backToStart') {\n          this.roadRun += index_direction\n          break\n        } else if (status === 'roading') {\n          this.roadRun += index_direction\n        } else if (status === 'backPoint') {\n          this.roadRun = this.roadRun.slice(0, -1);\n          this.backPointList.push({ rowIndex: rowIndex, colIndex: colIndex, stepNum: this.roadRun.length })\n        } else if (status === 'backing') {\n          this.roadRun = this.roadRun.slice(0, -1);\n        }\n        rowIndex = rowIndex + YV * 2\n        colIndex = colIndex + XV * 2\n      }\n      createEnd(tempMaze)\n      this.setState({ maze: [...tempMaze] })\n    }\n    makeRoad(1, 1, initEmptyMaze())\n  }\n  render() {\n    return (\n      <div>\n        {this.state.maze.map((row, rowIndex) =>\n          <div style={{ height: this.gridWidth }} key={rowIndex}>{\n            row.map((col, colIndex) =>\n              <span style={{ display: 'inline-block', width: this.gridWidth, height: this.gridWidth, backgroundColor: this.createStyle(col) }} key={colIndex}>{col}</span>\n            )}\n          </div>)}\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}